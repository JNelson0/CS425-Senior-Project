{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport useSWR from \"swr\";\nimport { jsonResponseFetcher } from \"./swr\";\n\nconst useNewUser = params => {\n  _s();\n\n  const {\n    mutate\n  } = useSWRConfig();\n  const [data, setData] = useState();\n  const [error, setError] = useState();\n  useEffect(() => {\n    setData(undefined);\n    setError(undefined); //Sends request to db, then updates based on userID\n\n    jsonResponseFetcher(\"/user\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(user => {\n      setData(user);\n      mutate(`/users/{user.id}`, user, false);\n    }).catch(setError);\n  }, [params]);\n  return {\n    data,\n    error,\n    loading: data == null && error == null\n  };\n};\n\n_s(useNewUser, \"pRwOu8wR8dTMjowxJHGPjkq0pSo=\", true);\n\nfunction usePostRequest(postPath, body, keyFn) {\n  _s2();\n\n  const {\n    mutate\n  } = useSWRConfig();\n  const [data, setData] = useState();\n  const [error, setError] = useState();\n  useEffect(() => {\n    setData(undefined);\n    setError(undefined); //Sends request to db, then updates based on userID\n\n    jsonResponseFetcher(postPath, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    }).then(user => {\n      setData(user);\n      mutate(`/users/{user.id}`, user, false);\n    }).catch(setError);\n  }, [body]);\n  return {\n    data,\n    error,\n    loading: data == null && error == null\n  };\n}\n\n_s2(usePostRequest, \"pRwOu8wR8dTMjowxJHGPjkq0pSo=\", true);\n\nusePostRequest(\"/user\", params, user => `/users/{user.id}`);","map":{"version":3,"sources":["/Users/charlespezeshki/Documents/GitHub/CS425-Senior-Project/client/src/hooks/useNewUser.js"],"names":["useEffect","useState","useSWR","jsonResponseFetcher","useNewUser","params","mutate","useSWRConfig","data","setData","error","setError","undefined","method","headers","body","JSON","stringify","then","user","catch","loading","usePostRequest","postPath","keyFn"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAAQC,mBAAR,QAAkC,OAAlC;;AAEA,MAAMC,UAAU,GAAGC,MAAM,IAAI;AAAA;;AAC3B,QAAM;AAACC,IAAAA;AAAD,MAAWC,YAAY,EAA7B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,EAAhC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,EAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO,CAACG,SAAD,CAAP;AACAD,IAAAA,QAAQ,CAACC,SAAD,CAAR,CAFc,CAGd;;AACAT,IAAAA,mBAAmB,CAAC,OAAD,EAAU;AAC3BU,MAAAA,MAAM,EAAE,MADmB;AAE3BC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB,OAFkB;AAG3BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,MAAf;AAHqB,KAAV,CAAnB,CAKGa,IALH,CAKQC,IAAI,IAAI;AACZV,MAAAA,OAAO,CAACU,IAAD,CAAP;AACAb,MAAAA,MAAM,CAAE,kBAAF,EAAqBa,IAArB,EAA2B,KAA3B,CAAN;AACD,KARH,EASGC,KATH,CASST,QATT;AAUD,GAdQ,EAcN,CAACN,MAAD,CAdM,CAAT;AAgBA,SAAO;AACLG,IAAAA,IADK;AAELE,IAAAA,KAFK;AAGLW,IAAAA,OAAO,EAAEb,IAAI,IAAI,IAAR,IAAgBE,KAAK,IAAI;AAH7B,GAAP;AAKD,CA1BD;;GAAMN,U;;AA4BN,SAASkB,cAAT,CAAwBC,QAAxB,EAAkCR,IAAlC,EAAwCS,KAAxC,EAA+C;AAAA;;AAC7C,QAAM;AAAClB,IAAAA;AAAD,MAAWC,YAAY,EAA7B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,EAAhC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,EAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO,CAACG,SAAD,CAAP;AACAD,IAAAA,QAAQ,CAACC,SAAD,CAAR,CAFc,CAGd;;AACAT,IAAAA,mBAAmB,CAACoB,QAAD,EAAW;AAC5BV,MAAAA,MAAM,EAAE,MADoB;AAE5BC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB,OAFmB;AAG5BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeF,IAAf;AAHsB,KAAX,CAAnB,CAKGG,IALH,CAKQC,IAAI,IAAI;AACZV,MAAAA,OAAO,CAACU,IAAD,CAAP;AACAb,MAAAA,MAAM,CAAE,kBAAF,EAAqBa,IAArB,EAA2B,KAA3B,CAAN;AACD,KARH,EASGC,KATH,CASST,QATT;AAUD,GAdQ,EAcN,CAACI,IAAD,CAdM,CAAT;AAgBA,SAAO;AACLP,IAAAA,IADK;AAELE,IAAAA,KAFK;AAGLW,IAAAA,OAAO,EAAEb,IAAI,IAAI,IAAR,IAAgBE,KAAK,IAAI;AAH7B,GAAP;AAKD;;IA1BQY,c;;AA4BTA,cAAc,CAAC,OAAD,EAAUjB,MAAV,EAAkBc,IAAI,IAAK,kBAA3B,CAAd","sourcesContent":["import {useEffect, useState} from \"react\"\nimport useSWR from \"swr\"\nimport {jsonResponseFetcher} from \"./swr\"\n\nconst useNewUser = params => {\n  const {mutate} = useSWRConfig()\n  const [data, setData] = useState()\n  const [error, setError] = useState()\n\n  useEffect(() => {\n    setData(undefined)\n    setError(undefined)\n    //Sends request to db, then updates based on userID\n    jsonResponseFetcher(\"/user\", {\n      method: \"POST\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify(params),\n    })\n      .then(user => {\n        setData(user)\n        mutate(`/users/{user.id}`, user, false)\n      })\n      .catch(setError)\n  }, [params])\n\n  return {\n    data,\n    error,\n    loading: data == null && error == null,\n  }\n}\n\nfunction usePostRequest(postPath, body, keyFn) {\n  const {mutate} = useSWRConfig()\n  const [data, setData] = useState()\n  const [error, setError] = useState()\n\n  useEffect(() => {\n    setData(undefined)\n    setError(undefined)\n    //Sends request to db, then updates based on userID\n    jsonResponseFetcher(postPath, {\n      method: \"POST\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify(body),\n    })\n      .then(user => {\n        setData(user)\n        mutate(`/users/{user.id}`, user, false)\n      })\n      .catch(setError)\n  }, [body])\n\n  return {\n    data,\n    error,\n    loading: data == null && error == null,\n  }\n}\n\nusePostRequest(\"/user\", params, user => `/users/{user.id}`)\n"]},"metadata":{},"sourceType":"module"}